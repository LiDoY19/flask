pipeline {
    agent any

    stages {
        // Stage 1: Clean Workspace
        stage('Clean Workspace') {
            steps {
                cleanWs()  // Cleans up the workspace to ensure a fresh build environment
            }
        }

        // Stage 2: Checkout Code
        stage('Checkout') {
            steps {
                echo "Checking out code..."
                checkout scm
            }
        }

        stage('Check GCP Key File') {
            steps {
                withCredentials([file(credentialsId: 'gke_key', variable: 'GCP_CREDENTIALS_FILE')]) {
                    script {
                        sh '''
                            echo "Checking where Jenkins stored the credentials..."
                            echo "Environment Variable GOOGLE_APPLICATION_CREDENTIALS: $GCP_CREDENTIALS_FILE"
                            ls -l $GCP_CREDENTIALS_FILE || echo "File not found!"
                            ls -l /tmp/*.json
                            sudo chmod 640 /var/lib/jenkins/workspace/gke-cd_main/polar-ray-449912-k6-28a0dcb2ec75.json
                            sudo chown jenkins:jenkins /var/lib/jenkins/workspace/gke-cd_main/polar-ray-449912-k6-28a0dcb2ec75.json
                        '''
                    }
                }
            }
        }

        // Stage 3: Terraform Deployment
        stage('Terraform') {
            steps {
                withCredentials([file(credentialsId: 'gke_key', variable: 'GCP_CREDENTIALS_FILE')]) {
                    script {
                        dir('.') {  // Make sure Terraform files are in the correct directory
                            sh '''
                                echo "Using GCP credentials from $GCP_CREDENTIALS_FILE"
                                export GOOGLE_APPLICATION_CREDENTIALS=$GCP_CREDENTIALS_FILE

                                cd terraform
                                terraform init
                                terraform plan -out=tfplan
                                terraform apply -auto-approve
                            '''
                        }
                    }
                }
            }
        }
    }
}
