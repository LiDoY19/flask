pipeline {
    agent any

    environment {
        AWS_REGION              = "us-east-1"
        EC2_INSTANCE_TAG_KEY    = "flaskapp"          // Tag key used to identify the EC2 instance
        EC2_INSTANCE_TAG_VALUE  = "flaskapp-test"     // Tag value used to identify the EC2 instance
        DOCKER_IMAGE            = "lidoy/gif_app_project:latest" 
    }

    stages {
        stage('Checkout') {
            steps {
                echo "Checking out code (if needed for deployment scripts or config)..."
                checkout scm
            }
        }

        stage('Get EC2 Public IP') {
            steps {
                script {
                    echo "Retrieving EC2 public IP using AWS CLI..."
                    withCredentials([[
                        $class: 'AmazonWebServicesCredentialsBinding',
                        credentialsId: 'aws_cred'
                    ]]) {
                        // Run an inline shell script to call AWS CLI
                        env.EC2_PUBLIC_IP = sh(
                            script: """
                                set -e
                                # Configure AWS CLI with Jenkins-provided creds
                                aws configure set aws_access_key_id \$AWS_ACCESS_KEY_ID
                                aws configure set aws_secret_access_key \$AWS_SECRET_ACCESS_KEY
                                aws configure set default.region ${AWS_REGION}

                                # Describe instances by tag, filter for 'running' state, extract public IP
                                aws ec2 describe-instances \\
                                    --filters "Name=tag:${EC2_INSTANCE_TAG_KEY},Values=${EC2_INSTANCE_TAG_VALUE}" \\
                                              "Name=instance-state-name,Values=running" \\
                                    --query "Reservations[*].Instances[*].PublicIpAddress" \\
                                    --output text
                            """,
                            returnStdout: true
                        ).trim()

                        if (!env.EC2_PUBLIC_IP) {
                            error "No running EC2 instance found with tag '${EC2_INSTANCE_TAG_KEY}=${EC2_INSTANCE_TAG_VALUE}'."
                        }

                        echo "Found EC2 Public IP: ${env.EC2_PUBLIC_IP}"
                    }
                }
            }
        }

        stage('Deploy to EC2') {
            steps {
                script {
                    echo "Deploying Flask app to EC2 instance at ${env.EC2_PUBLIC_IP}..."
                    withCredentials([
                        sshUserPrivateKey(
                            credentialsId: 'n_ssh_key',
                            keyFileVariable: 'EC2_KEY_FILE', 
                            usernameVariable: 'EC2_USERNAME'
                        )
                    ]) {
                        sh """
#!/bin/bash
set -e
ssh -o StrictHostKeyChecking=no -i \$EC2_KEY_FILE \$EC2_USERNAME@${env.EC2_PUBLIC_IP} << 'EOF'
    echo "Connected successfully to EC2"
    echo "Stopping and removing any existing containers..."
    cd /home/ec2-user/gifproject
    docker-compose down || true

    echo "Pulling the latest Docker image..."
    docker-compose pull 

    echo "Starting new container..."
    docker-compose up --build -d

    echo "Deployment complete!"
EOF
                        """
                    }
                }
            }
        }
    }

    post {
        success {
            echo "Deployment pipeline completed successfully!"
            // Optionally send Slack/email notifications here
        }
        failure {
            echo "Deployment pipeline failed. Please check the logs."
            // Optionally send Slack/email notifications here
        }
    }
}
