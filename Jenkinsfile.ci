pipeline {
    agent any

    environment {
        DOCKER_COMPOSE_FILE = 'docker-compose.yml'
        PROJECT_NAME        = 'my_project'
        IMAGE_NAME          = 'gif_app_project'
        DOCKERHUB_REPO      = 'lidoy/gif_app_project'
        VERSION             = "1.0.${BUILD_NUMBER}"
    }

    stages {
        stage('Description'){
            steps{
                echo 'Running CI pipeline:'
            }
        }
        stage('Clean Up'){
            steps {
                echo 'Cleaning up the working directory'
                sh "docker compose -p ${PROJECT_NAME} down -v || true"
            }
        }
        stage('Checkout') {
            steps {
                echo 'Checking out source code...'
                checkout scm
            }
        }
        stage('Build and Push Docker Image') {
            steps {
                script {
                    dir("${WORKSPACE}") {
                        echo "Setting up Docker Buildx builder named Flaskgifhbuild"
                        // Create or use an existing builder
                        sh '''
                            docker buildx create --use --name Flaskgifhbuild || docker buildx use Flaskgifhbuild
                        '''
                        echo "Building and pushing Docker image with multi-platform support..."
                        sh """
                            docker buildx build --platform linux/amd64,linux/arm64 \
                              -t ${DOCKERHUB_REPO}:latest \
                              -t ${DOCKERHUB_REPO}:${VERSION} \
                              . --push
                        """
                    }
                }
            }
        }
        stage('Deploy & Test') {
            steps {
                script {
                    echo 'Deploying Docker containers using docker-compose...'
                    withCredentials([
                        usernamePassword(credentialsId: 'db_credentials', usernameVariable: 'DB_USER', passwordVariable: 'DB_PASSWORD')
                    ]) {
                        sh """
                            export MYSQL_ROOT_PASSWORD=\$DB_PASSWORD
                            docker compose -p ${PROJECT_NAME} down || true
                            docker compose -p ${PROJECT_NAME} up -d
                        """
                    }
                    echo 'Waiting for services to be ready...'
                    // Adjust sleep as necessary for your services to become healthy
                    sleep 30
                    echo 'Testing DB connection...'
                    withCredentials([
                        usernamePassword(credentialsId: 'db_credentials', usernameVariable: 'DB_USER', passwordVariable: 'DB_PASSWORD')
                    ]) {
                        sh """
                            docker exec mysql_db mysql -uroot -p${DB_PASSWORD} -e "SHOW DATABASES;"
                        """
                    }
                    echo 'Testing application...'
                    sh """
                        curl -f http://localhost:5001 || (echo 'Application is not running' && exit 1)
                    """
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed. Check logs for details.'
        }
    }
}
